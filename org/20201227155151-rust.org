#+title: Rust

Rust is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. Rust is syntactically similar to [[file:20201227155936-cpp.org][C++]], but can guarantee memory safety by using a borrow checker to validate references.

#+BEGIN_SRC rust
fn main() {
    println!("Hello, World");
}
#+END_SRC

* Resources

- [[https://www.youtube.com/watch?v=qbuTh1mIyHU&list=PL5aMzERQ_OZ8RWqn-XiZLXm1IJuaQbXp0][KAIST CS420: Compiler Design]]
- [[file:20210109144507-emacs.org][Emacs]] configuration
  + [[https://emacs-lsp.github.io/lsp-mode/page/lsp-rust/#rust][lsp-rust]]
  + [[https://rust-analyzer.github.io/manual.html#emacs][Rust Analyzer - Emacs]]
  + [[https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/][Configuring Emacs for Rust development]]

** Books

- [[https://dhghomon.github.io/easy_rust/Chapter_1.html][Easy Rust]]
- [[https://rust-unofficial.github.io/patterns/][Rust Design Patterns]]
- [[https://rust-cli.github.io/book/index.html][Command line apps in Rust]]
- [[https://rust-unofficial.github.io/too-many-lists/index.html][Learn Rust With Entirely Too Many Linked Lists]]

** Articles

- [[https://willspeak.me/2019/07/10/lisp-in-two-days-with-rust.html][LISP in Two Days with Rust]]
  + [[file:20201225161334-lisp.org][Lisp]]
- [[http://hotforknowledge.com/2019/07/14/6-rust-the-new-c/][RUST AS THE NEW C. PART 1: BUILDING AND COMBINING NATIVE LIBS INTO C API]]
  + [[file:20201227160533-c.org][C]]
- [[https://bodil.lol/parser-combinators/][Learning Parser Combinators With Rust]]
- [[https://mp.weixin.qq.com/s/1mYuEZjdVjiscOkqKkrbkg][Rust 编程 | 基于Y组合子实现闭包递归]]
- [[https://blog.juliobiason.me/thoughts/why-rust-and-not-go/][Why Rust and not Go]]
- [[https://stopa.io/post/222][Risp (in (Rust) (Lisp))]]
  + [[file:20201225161334-lisp.org][Lisp]]
